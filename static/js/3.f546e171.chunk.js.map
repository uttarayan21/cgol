{"version":3,"sources":["Cgol.tsx","reportWebVitals.ts","index.tsx"],"names":["Cgol","props","canvasRef","canvas","ctx","universe","animationRequestId","React","createRef","state","cellRadius","width","Math","floor","window","innerWidth","height","innerHeight","deadColor","aliveColor","console","log","Universe","new","random","getIndex","bind","drawCellGrids","drawCells","renderLoop","stopRenderLoop","this","current","getContext","requestAnimationFrame","column","row","count","r","c","moveTo","arc","PI","stroke","cells_ptr","cells","Uint8Array","memory","buffer","index","fillStyle","Cell","Dead","beginPath","fill","tick","cancelAnimationFrame","Row","className","Button","variant","onClick","ref","Component","CgolHeader","Navbar","bg","Brand","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/3.f546e171.chunk.js","sourcesContent":["import Button from \"react-bootstrap/Button\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Row from \"react-bootstrap/Row\";\nimport { Universe, Cell } from \"cgol\";\nimport { memory } from \"cgol/cgol_bg.wasm\";\nimport React from \"react\";\n\ninterface CgolProps {\n  cellRadius?: number;\n  width?: number;\n  height?: number;\n  aliveColor?: string;\n  deadColor?: string;\n}\n\ninterface CgolState {\n  cellRadius: number;\n  width: number;\n  height: number;\n  aliveColor: string;\n  deadColor: string;\n}\n\nclass Cgol extends React.Component<CgolProps, CgolState> {\n  canvasRef: React.RefObject<HTMLCanvasElement>;\n  canvas: HTMLCanvasElement | null;\n  ctx: CanvasRenderingContext2D | null;\n  universe: Universe;\n  animationRequestId: number | null;\n  constructor(props: CgolProps) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.canvas = null;\n    this.ctx = null;\n    this.animationRequestId = null;\n    let state: CgolState = {\n      cellRadius: 10,\n      width: Math.floor(window.innerWidth / 10),\n      height: Math.floor(window.innerHeight / 10),\n      deadColor: \"#FFFFFF\",\n      aliveColor: \"#000000\",\n    };\n\n    if (this.props.cellRadius) {\n      state.cellRadius = this.props.cellRadius;\n    }\n    if (this.props.width) {\n      state.width = this.props.width;\n    }\n    if (this.props.height) {\n      state.height = this.props.height;\n    }\n    if (this.props.deadColor) {\n      state.deadColor = this.props.deadColor;\n    }\n    if (this.props.aliveColor) {\n      state.aliveColor = this.props.aliveColor;\n    }\n    this.state = state;\n    console.log(this.state);\n    this.universe = Universe.new(state.width, state.height);\n    this.universe.random();\n\n    // Bind functions with this\n    this.getIndex = this.getIndex.bind(this);\n    this.drawCellGrids = this.drawCellGrids.bind(this);\n    this.drawCells = this.drawCells.bind(this);\n    this.renderLoop = this.renderLoop.bind(this);\n    this.stopRenderLoop = this.stopRenderLoop.bind(this);\n  }\n  getContext() {\n    this.canvas = this.canvasRef.current;\n    if (this.canvas) {\n      this.ctx = this.canvas.getContext(\"2d\");\n    }\n  }\n  componentDidMount() {\n    this.getContext();\n    this.drawCellGrids();\n    requestAnimationFrame(this.renderLoop);\n  }\n  getIndex(column: number, row: number) {\n    return row * this.state.width + column;\n  }\n  drawCellGrids() {\n    let count = 0;\n    for (let r = 0; r < this.state.height; r++) {\n      for (let c = 0; c < this.state.width; c++) {\n        console.log(r, c, ++count);\n        this.ctx?.moveTo((c + 1) * 2 * this.state.cellRadius, (r * 2 + 1) * this.state.cellRadius);\n        this.ctx?.arc(\n          (2 * c + 1) * this.state.cellRadius,\n          (2 * r + 1) * this.state.cellRadius,\n          this.state.cellRadius,\n          0,\n          Math.PI * 2\n        );\n      }\n    }\n    this.ctx?.stroke();\n  }\n\n  drawCells() {\n    let cells_ptr: number = this.universe.cells();\n    let cells: Uint8Array = new Uint8Array(memory.buffer, cells_ptr, this.state.width * this.state.height);\n\n    for (let r = 0; r < this.state.height; r++) {\n      for (let c = 0; c < this.state.width; c++) {\n        if (this.ctx) {\n          let index = this.getIndex(c, r);\n          this.ctx.fillStyle = cells[index] === Cell.Dead ? \"#FFFFFF\" : \"green\";\n        }\n        this.ctx?.beginPath();\n        this.ctx?.moveTo((c + 1) * 2 * this.state.cellRadius, (r * 2 + 1) * this.state.cellRadius);\n        this.ctx?.arc(\n          (2 * c + 1) * this.state.cellRadius,\n          (2 * r + 1) * this.state.cellRadius,\n          this.state.cellRadius - 0.9,\n          0,\n          Math.PI * 2\n        );\n        this.ctx?.fill();\n      }\n    }\n  }\n\n  renderLoop() {\n    this.drawCells();\n    this.universe.tick();\n    this.animationRequestId = requestAnimationFrame(this.renderLoop);\n  }\n  stopRenderLoop() {\n    if (this.animationRequestId) {\n      cancelAnimationFrame(this.animationRequestId);\n      this.animationRequestId = null;\n    } else {\n      this.animationRequestId = requestAnimationFrame(this.renderLoop);\n    }\n  }\n  render() {\n    return (\n      <div>\n        <CgolHeader />\n        <div>\n          <Row className=\"mb-3 d-flex justify-content-center\">\n            <Button variant=\"info\" onClick={this.stopRenderLoop}>\n              Pause/Play\n            </Button>\n            <Button variant=\"info\" onClick={this.universe.random}>\n              Random\n            </Button>\n          </Row>\n          <Row className=\"d-flex justify-content-center\">\n            <canvas\n              width={this.state.width * this.state.cellRadius * 2}\n              height={this.state.height * this.state.cellRadius * 2}\n              ref={this.canvasRef}\n            ></canvas>\n          </Row>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass CgolHeader extends React.Component {\n  render() {\n    return (\n      <Navbar bg=\"dark\" variant=\"dark\" className=\"mb-4 justify-content-between\">\n        <Navbar.Brand>Conway's Game Of Life</Navbar.Brand>\n      </Navbar>\n    );\n  }\n}\n\nexport default Cgol;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Cgol from \"./Cgol\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Cgol height={25} width={55} cellRadius={10} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}